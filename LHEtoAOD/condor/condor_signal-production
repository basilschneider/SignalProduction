#!/usr/bin/env bash

# Condor submission script to product signal events

# Get positional arguments
cmssw_hadronization="${1}"
cmssw_digitization="${2}"
cmssw_reconstruction="${3}"
cmssw_hltresim="${4}"
cmssw_miniaod="${5}"
name="${6}"
cluster="${7}"
process="${8}"
outdir="${name}"/c"${cluster}"/p"$(printf "%05d\n" "${process}")"
eosoutdir=/eos/uscms/store/user/bschneid/analysis/sos/"${outdir}"
inputLHE=/eos/uscms/store/user/bschneid/analysis/sos/lhe/"${name}"/input$(printf "%05d\n" "${process}").lhe

pwd="${PWD}"

echo Hello Condor
echo

echo Date: $(date)
echo Worker node: $(uname -a)
echo Operating system: $(cat /etc/redhat-release)
echo Working directory: "${pwd}"
echo Output directory: "${outdir}"
echo EOS output directory: "${eosoutdir}"
echo Input LHE file: "${inputLHE}"
echo Process number: "${process}"
echo Cluster number: "${cluster}"
echo

echo CMSSW version for hadronization: "${cmssw_hadronization}"
echo CMSSW version for digitization: "${cmssw_digitization}"
echo CMSSW version for reconstruction: "${cmssw_reconstruction}"
echo CMSSW version for hltresim: "${cmssw_hltresim}"
echo CMSSW version for miniaod: "${cmssw_miniaod}"
echo

# Create output dummy file that can be transferred back
# HTCondor has a bug, it always needs to transfer at least one file back
# This can cause it to overwrite stuff, so we just create a dummy file, that
# happily can be transferred and overwritten
touch condor_output_dummy

echo Unpack tarball
tar xf tarball_signal-production.tar.gz

# Transfer lhe file
xrdcp root://cmseos.fnal.gov/"${inputLHE}" input.lhe
if [ "$?" -ne 0 ]; then
    echo LHE file "${inputLHE}" not found.
    echo Abort.
    exit
fi

# Run all steps in subshells, to not confuse different CMSSW setups
(
    echo "Run Hadronization."
    source /cvmfs/cms.cern.ch/cmsset_default.sh
    cd "${cmssw_hadronization}"
    scram b ProjectRename
    cd src
    eval $(scram runtime -sh)
    cmsRun cfg_hadronization.py
)
(
    echo "Run Digitization."
    source /cvmfs/cms.cern.ch/cmsset_default.sh
    cd "${cmssw_digitization}"
    scram b ProjectRename
    cd src
    eval $(scram runtime -sh)
    cmsRun cfg_digitization.py
)
(
    echo "Run Reconstruction."
    source /cvmfs/cms.cern.ch/cmsset_default.sh
    cd "${cmssw_reconstruction}"
    scram b ProjectRename
    cd src
    eval $(scram runtime -sh)
    cmsRun cfg_reconstruction.py
)
(
    echo "Run HLT Resimulation."
    source /cvmfs/cms.cern.ch/cmsset_default.sh
    cd "${cmssw_hltresim}"
    scram b ProjectRename
    cd src
    eval $(scram runtime -sh)
    cmsRun cfg_hltresim.py
)
(
    echo "Run MiniAOD Production."
    source /cvmfs/cms.cern.ch/cmsset_default.sh
    cd "${cmssw_miniaod}"
    scram b ProjectRename
    cd src
    eval $(scram runtime -sh)
    cmsRun cfg_miniaod.py
)

# Copy output rootfiles to eos
echo Copy output to eos.
xrdfs root://cmseos.fnal.gov/ mkdir -p "${eosoutdir}"
for rootfile in *.root; do
    echo Copy rootfile "${rootfile}".
    # Since copying to eos often fails for no obvious reason, brute force the copy
    for i in {1..100}; do
        xrdcp -fs "${rootfile}" root://cmseos.fnal.gov/"${eosoutdir}" \
            && break \
            || echo xrdcp try "${i}" for file "${rootfile}" failed.
    done
done

# Copy all config files into one folder and transfer to eos
mkdir cfg
cp "${cmssw_hadronization}"/src/cfg_hadronization.py cfg/
cp "${cmssw_digitization}"/src/cfg_digitization.py cfg/
cp "${cmssw_reconstruction}"/src/cfg_reconstruction.py cfg/
cp "${cmssw_hltresim}"/src/cfg_hltresim.py cfg/
cp "${cmssw_miniaod}"/src/cfg_miniaod.py cfg/
xrdfs root://cmseos.fnal.gov/ mkdir -p "${eosoutdir}"/cfg/
xrdcp -frs cfg root://cmseos.fnal.gov/"${eosoutdir}"/cfg/

echo Bye.
